#### To Do ######################################################################
# 1) par operators return matrix, correct so return FLPar
# 2) shift dnormal & logistic to ogive.R and add to FLBRP
# 3) Document M & mat50 and add to FLBRP

### coercion to parameters
mmm<-function(x){
    switch(class(x),
           list   =FLPar(unlist(x)),
           numeric=FLPar(x),
           x)}

## NaturallhGen( Mortality as a function of Linf
M     =function(L,Linf,M1=0.1,h=1.71,n=-1.66,i=0.8) M1+h*Linf^i*L^n

## Maturity age at 50% maturity
mat50 =function(M,k) log(((3*k+M)/M)/k)

#### Life History Generator ####################################################
setGeneric('lhSim', function(grw,...)
   standardGeneric('lhSim'))
setMethod("lhSim", signature(grw="numeric"),
   function(grw,
            mat=FLPar("a50"=NA,"ato95"=3),
            sel=FLPar(a=1,sl=1,sr=1e6),
            m  =NULL,   
            sr =list(model="bevholt",steepness=0.9,vbiomass=1e3),
            age=0:40,...){

            grw=FLPar(sinf=grw,k=0.6-grw*0.003,a=0.001,b=3)
            
       return(lhSim.(grw,mmm(mat),mmm(sel),m,sr,FLQuant(age,dimnames=list(age=age)),...))})

setMethod("lhSim", signature(grw="FLPar"),
   function(grw,
            mat=FLPar("a50"=NA,"ato95"=3),
            sel=FLPar(a=1,sl=1,sr=1e6),
            m  =NULL,
            sr =list(model="bevholt",steepness=0.9,vbiomass=1e3),
            age=0:40,...)

       return(lhSim.(grw,mmm(mat),mmm(sel),m,sr,FLQuant(age,dimnames=list(age=age)),...)))


lhSim.=function(grw,mat,sel,m,sr,age,...){
   ## Biological processes
   wts       =vonB(grw,age)
   if (is.null(m))
     m       =FLQuant(M(c(1000*growth(age+0.5,grw["sinf"],grw["k"]))^(1/3),grw["sinf"]),dimnames=dimnames(wts))
   if (is.na(mat["a50"])){
     mat["a50"]=mat50(c(mean(m)),grw["k"])}
   mat.        =logistic(FLPar(a50=mat["a50"],ato95=(mat["a50"]+mat["ato95"]),asym=1.0),age)

   sel=FLPar(a1=(mat["a50"]+mat["ato95"])*sel["a"],
             sl=(mat["a50"]+mat["ato95"])*sel["sl"],
	     sr=(mat["a50"]+mat["ato95"])*sel["sr"])

   selPattern =doubleNormal(sel,age)
   
   dms=dimnames(m)
   ## create a FLBRP object to	 calculate expected equilibrium values and ref pts
   res=FLBRP(stock.wt       =wts,
             landings.wt    =wts,
             discards.wt    =wts,
             bycatch.wt     =wts,
             m              =m,
             mat            =mat.,
             landings.sel   =FLQuant(selPattern,dimnames=dms),
             discards.sel   =FLQuant(0,         dimnames=dms),
             bycatch.harvest=FLQuant(0,         dimnames=dms),
             harvest.spwn   =FLQuant(0,         dimnames=dms),
             m.spwn         =FLQuant(0,         dimnames=dms),
             availability   =FLQuant(1,         dimnames=dms))

   ## i.e. FApex
   range(res,c("minfbar","maxfbar"))[]<-as.integer(sel["a1"])

   ## replace any slot passed in as an arg
   args<-list(...)
   for (slt in names(args)[names(args) %in% names(getSlots("FLBRP"))[names(getSlots("FLBRP"))!="fbar"]])
     slot(res, slt)<-args[[slt]]

   ## Stock recruitment relationship
   model(res) =do.call(sr$model,list())$model
   params(res)=FLPar(abPars(sr$model,spr0=spr0(res),s=sr$steepness,v=sr$vbiomass))

   if ("fbar" %in% names(args)) fbar(res)<-args[["fbar"]]

   return(brp(res))}
################################################################################
