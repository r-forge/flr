Use list as main input class

(1) Single list for whole data.frame
(2) Lists of lists, one per line or groups of lines
(3) List with iter= to be split across target and targetArray


as.data.frame(list(quantity='ssb', val=0.95, rel=2000:2001))

  quantity  val  rel
1      ssb 0.95 2000
2      ssb 0.95 2001


as.data.frame(list(quantity='ssb', val=rlnorm(10), rel=2000:2001, iter=1:5))
   quantity       val  rel iter
1       ssb 0.5895477 2000    1
2       ssb 0.3593648 2001    2
3       ssb 0.6207268 2000    3
4       ssb 2.8179802 2001    4
5       ssb 1.0804915 2000    5
6       ssb 1.2595278 2001    1

rbind(as.data.frame(list(year=2002, quantity='ssb', val=1000)),
  as.data.frame(list(year=2003, quantity='ssb', val=1200)))


args <- list(list(quantity='ssb', val=0.95, rel=2000:2001, year=2001:2002))

args <- list(list(quantity='ssb', val=0.95, rel=2000:2001, year=2001:2002),
  list(quantity='f', min=0.9, max=1.1, year=2003))

# Does rbind match names?
rbind(as.data.frame(list(year=2002, quantity='ssb', val=1000)),
  as.data.frame(list(year=2003, quantity='ssb')))

# No! Instead ...

merge.rec <- function(.list, ...){
	if(length(.list)==1) return(.list[[1]])
	Recall(c(list(merge(.list[[1]], .list[[2]], ...)), .list[-(1:2)]), ...)
}

merge.rec(args, all=T)


A<-data.frame(1,1,1)
names(A)=letters[1:3]
B<-matrix(0,1,2) 
B<-as.data.frame(B)
names(B)<-names(A)[1:2]
rbind(A,B) 
